Metodos de las potencias - Power Iteration
    * Par autoValor, autoVector O(a1/a2)
    ----------------------------------------
    def power_iteration(A):
        # Ideally choose a random vector
        # To decrease the chance that our vector
        # Is orthogonal to the eigenvector
        b_k = np.random.rand(A.shape[0])

        for _ in range(num_simulations):
            # calculate the matrix-by-vector product Ab
            b_k1 = np.dot(A, b_k)

            # calculate the norm
            b_k1_norm = np.linalg.norm(b_k1)

            # re normalize the vector
            b_k = b_k1 / b_k1_norm

        return b_k
    -----------------------------------------------
    * Para el segundo paso: B=A − (λ1/|v1|²)(v1)(v1)T
                (https://math.stackexchange.com/questions/768882/power-method-for-finding-all-eigenvectors)
                Tiene que ser simetrica porque los autovectores deben ser ortogonales

Metodos de las potencias inversas con traslacion
obtener un autovalor con una aproximacion inicial

Metodos de las potencias inversas - Inverse Iteration
It allows one to find an approximate eigenvector when an approximation to a corresponding eigenvalue is already known. O(n³)

Metodo de Givens
Elementary plane rotations are one of the building blocks of numerical linear algebra
and are employed in reducing matrices to condensed form for eigenvalue computations
and during the QR algorithm

Metodo de Jacobi
    * Matriz simetrica
    * O(n⁴*logB) (http://www.cas.mcmaster.ca/~qiao/publications/TQ12.pdf)

Metodo de HouseHolder
    * Genera 0 fuera de la diagonales

Factorizacion QR
    Ejemplos: http://www.math.cornell.edu/~web6140/TopTenAlgorithms/QRalgorithm.html

    * Parecido a HouseHolder
    *The QR algorithm only converges using Wilkinson-Shift strategie!
        (https://math.stackexchange.com/questions/1262363/convergence-of-qr-algorithm-to-upper-triangular-matrix)

    Francis Algorithm
        * http://cavern.uark.edu/~arnold/4353/Francis.pdf
        * http://www.math.wsu.edu/faculty/watkins/slides/ilas10.pdf

    QR Aceleracion mediante traslaciones
        * Tridiagonalizar con HouseHolder
        * Se busca el valor de la traslacion en los valores de abajo a la derecha


Kernel:
    *Parameter selection (http://www.csie.ntu.edu.tw/~cjlin/talks/mlss_kyoto.pdf , pag34)

    Test BRF Kernel (exp)
        Encontrar C and Y https://github.com/arnaudsj/libsvm/blob/master/tools/easy.py

averiguar sobre RRQR
